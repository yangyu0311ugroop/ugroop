// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Avatar /> render() should not include tooltip if noTooltip props is true 1`] = `
<div>
  <div
    className=""
  >
    <WithStyles(InlineButton)
      offsetLeft={true}
      offsetRight={true}
    >
      <div>
        <WithStyles(ForwardRef(Avatar))
          classes={
            Object {
              "img": "defaultImg",
              "root": "defaultRoot",
            }
          }
        >
          ?
        </WithStyles(ForwardRef(Avatar))>
      </div>
    </WithStyles(InlineButton)>
  </div>
</div>
`;

exports[`<Avatar /> render() should render Button 1`] = `
<div>
  <WithStyles(Tooltip)
    classes={
      Object {
        "lightTooltip": "",
        "popper": undefined,
      }
    }
    enterDelay={200}
    isLight={true}
    placement="top"
    title="?"
  >
    <WithStyles(InlineButton)
      offsetLeft={true}
      offsetRight={true}
    >
      <div>
        <WithStyles(ForwardRef(Avatar))
          classes={
            Object {
              "img": "defaultImg",
              "root": "some class defaultRoot",
            }
          }
        >
          ?
        </WithStyles(ForwardRef(Avatar))>
      </div>
    </WithStyles(InlineButton)>
  </WithStyles(Tooltip)>
  <Popover
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "right",
        "vertical": "center",
      }
    }
    disableRestoreFocus={true}
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "center",
      }
    }
  >
    <WithStyles(Connect(WithSimplifyResaga(UserCard)))
      close={[Function]}
      id={1}
      knownAs="?"
      orgId={0}
      updatedEmail=""
    />
  </Popover>
</div>
`;

exports[`<Avatar /> render() should render custom tooltip text 1`] = `
<div>
  <WithStyles(Tooltip)
    classes={
      Object {
        "lightTooltip": "",
        "popper": undefined,
      }
    }
    enterDelay={200}
    isLight={true}
    placement="top"
    title="Tooltip Text"
  >
    <WithStyles(InlineButton)
      offsetLeft={true}
      offsetRight={true}
    >
      <div>
        <WithStyles(ForwardRef(Avatar))
          classes={
            Object {
              "img": "defaultImg",
              "root": "defaultRoot",
            }
          }
        >
          FN
        </WithStyles(ForwardRef(Avatar))>
      </div>
    </WithStyles(InlineButton)>
  </WithStyles(Tooltip)>
  <Popover
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "right",
        "vertical": "center",
      }
    }
    disableRestoreFocus={true}
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "center",
      }
    }
  >
    <WithStyles(Connect(WithSimplifyResaga(UserCard)))
      close={[Function]}
      id={0}
      knownAs="Full Name"
      orgId={0}
      updatedEmail=""
    />
  </Popover>
</div>
`;

exports[`<Avatar /> render() should render default 1`] = `
<div>
  <WithStyles(Tooltip)
    classes={
      Object {
        "lightTooltip": "",
        "popper": undefined,
      }
    }
    enterDelay={200}
    isLight={true}
    placement="top"
    title="?"
  >
    <WithStyles(InlineButton)
      offsetLeft={true}
      offsetRight={true}
    >
      <div>
        <WithStyles(ForwardRef(Avatar))
          classes={
            Object {
              "img": "defaultImg",
              "root": "defaultRoot",
            }
          }
        >
          ?
        </WithStyles(ForwardRef(Avatar))>
      </div>
    </WithStyles(InlineButton)>
  </WithStyles(Tooltip)>
  <Popover
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "right",
        "vertical": "center",
      }
    }
    disableRestoreFocus={true}
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "center",
      }
    }
  >
    <WithStyles(Connect(WithSimplifyResaga(UserCard)))
      close={[Function]}
      id={0}
      knownAs="?"
      orgId={0}
      updatedEmail=""
    />
  </Popover>
</div>
`;

exports[`<Avatar /> render() should render first name and last name initials 1`] = `
<div>
  <WithStyles(Tooltip)
    classes={
      Object {
        "lightTooltip": "",
        "popper": undefined,
      }
    }
    enterDelay={200}
    isLight={true}
    placement="top"
    title="Name"
  >
    <WithStyles(InlineButton)
      offsetLeft={true}
      offsetRight={true}
    >
      <div>
        <WithStyles(ForwardRef(Avatar))
          classes={
            Object {
              "img": "defaultImg",
              "root": "defaultRoot",
            }
          }
        >
          N
        </WithStyles(ForwardRef(Avatar))>
      </div>
    </WithStyles(InlineButton)>
  </WithStyles(Tooltip)>
  <Popover
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "right",
        "vertical": "center",
      }
    }
    disableRestoreFocus={true}
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "center",
      }
    }
  >
    <WithStyles(Connect(WithSimplifyResaga(UserCard)))
      close={[Function]}
      id={0}
      knownAs="Name"
      orgId={0}
      updatedEmail=""
    />
  </Popover>
</div>
`;

exports[`<Avatar /> render() should render first name and last name initials 2`] = `
<div>
  <WithStyles(Tooltip)
    classes={
      Object {
        "lightTooltip": "",
        "popper": undefined,
      }
    }
    enterDelay={200}
    isLight={true}
    placement="top"
    title="Full Name"
  >
    <WithStyles(InlineButton)
      offsetLeft={true}
      offsetRight={true}
    >
      <div>
        <WithStyles(ForwardRef(Avatar))
          classes={
            Object {
              "img": "defaultImg",
              "root": "defaultRoot",
            }
          }
        >
          FN
        </WithStyles(ForwardRef(Avatar))>
      </div>
    </WithStyles(InlineButton)>
  </WithStyles(Tooltip)>
  <Popover
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "right",
        "vertical": "center",
      }
    }
    disableRestoreFocus={true}
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "center",
      }
    }
  >
    <WithStyles(Connect(WithSimplifyResaga(UserCard)))
      close={[Function]}
      id={0}
      knownAs="Full Name"
      orgId={0}
      updatedEmail=""
    />
  </Popover>
</div>
`;

exports[`<Avatar /> render() should render more 1`] = `
<div>
  <WithStyles(Tooltip)
    classes={
      Object {
        "lightTooltip": "",
        "popper": undefined,
      }
    }
    enterDelay={200}
    isLight={true}
    placement="top"
    title="5 others"
  >
    <WithStyles(InlineButton)
      offsetLeft={true}
      offsetRight={true}
    >
      <WithStyles(ForwardRef(Avatar))
        classes={
          Object {
            "img": "defaultImg",
            "root": "defaultRoot",
          }
        }
      >
        +
        5
      </WithStyles(ForwardRef(Avatar))>
    </WithStyles(InlineButton)>
  </WithStyles(Tooltip)>
  <Popover
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "right",
        "vertical": "center",
      }
    }
    disableRestoreFocus={true}
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "center",
      }
    }
  >
    <WithStyles(Connect(WithSimplifyResaga(UserCard)))
      close={[Function]}
      id={0}
      knownAs="?"
      orgId={0}
      updatedEmail=""
    />
  </Popover>
</div>
`;

exports[`<Avatar /> render() should render no tooltip 1`] = `
<div>
  <div
    className=""
  >
    <WithStyles(InlineButton)
      offsetLeft={true}
      offsetRight={true}
    >
      <div>
        <WithStyles(ForwardRef(Avatar))
          classes={
            Object {
              "img": "defaultImg",
              "root": "some class defaultRoot",
            }
          }
        >
          ?
        </WithStyles(ForwardRef(Avatar))>
      </div>
    </WithStyles(InlineButton)>
  </div>
</div>
`;

exports[`<Avatar /> render() should render sizes 1`] = `
<div>
  <WithStyles(Tooltip)
    classes={
      Object {
        "lightTooltip": "",
        "popper": undefined,
      }
    }
    enterDelay={200}
    isLight={true}
    placement="top"
    title="?"
  >
    <WithStyles(InlineButton)
      offsetLeft={true}
      offsetRight={true}
    >
      <div>
        <WithStyles(ForwardRef(Avatar))
          classes={
            Object {
              "img": "defaultImg",
              "root": "defaultRoot",
            }
          }
        >
          ?
        </WithStyles(ForwardRef(Avatar))>
      </div>
    </WithStyles(InlineButton)>
  </WithStyles(Tooltip)>
  <Popover
    anchorEl={null}
    anchorOrigin={
      Object {
        "horizontal": "right",
        "vertical": "center",
      }
    }
    disableRestoreFocus={true}
    onClose={[Function]}
    open={false}
    transformOrigin={
      Object {
        "horizontal": "left",
        "vertical": "center",
      }
    }
  >
    <WithStyles(Connect(WithSimplifyResaga(UserCard)))
      close={[Function]}
      id={0}
      knownAs="?"
      orgId={0}
      updatedEmail=""
    />
  </Popover>
</div>
`;

exports[`<Avatar /> renderAvatar() should render more 1`] = `
<div>
  <WithStyles(ForwardRef(Avatar))
    classes={
      Object {
        "img": "defaultImg",
        "root": "defaultRoot",
      }
    }
  >
    +
    5
  </WithStyles(ForwardRef(Avatar))>
</div>
`;

exports[`<Avatar /> renderAvatar() should render profileUrl 1`] = `
<div>
  <div>
    <WithStyles(Connect(WithSimplifyResaga(WithUploadFile)))
      alt="ping pong 123"
      className={null}
      id="image link"
      shape="imageRound"
      size="imageExtraSmall"
      variant="readOnly"
    />
  </div>
</div>
`;

exports[`<Avatar /> renderAvatar() should render question mark when nothing is given 1`] = `
<div>
  <div>
    <WithStyles(ForwardRef(Avatar))
      classes={
        Object {
          "img": "defaultImg",
          "root": "defaultRoot",
        }
      }
    >
      ?
    </WithStyles(ForwardRef(Avatar))>
  </div>
</div>
`;

exports[`<Avatar /> renderAvatar() should render the name when showFullName is true 1`] = `
<div>
  <div>
    <WithStyles(ForwardRef(Avatar))
      classes={
        Object {
          "img": "defaultImg",
          "root": "defaultRoot",
        }
      }
    >
      <p>
        Render letter avatar
      </p>
    </WithStyles(ForwardRef(Avatar))>
    <p>
      ?
    </p>
  </div>
</div>
`;

exports[`<Avatar /> renderAvatar() should render what is being passed to children props 1`] = `
<div>
  <div>
    <WithStyles(ForwardRef(Avatar))
      classes={
        Object {
          "img": "defaultImg",
          "root": "defaultRoot",
        }
      }
    >
      <p>
        Render letter avatar
      </p>
    </WithStyles(ForwardRef(Avatar))>
  </div>
</div>
`;
