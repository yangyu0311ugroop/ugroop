// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Participant /> #ShowParticipant() ShowParticipant 1`] = `<div />`;

exports[`<Participant /> #ShowParticipant() ShowParticipant return null 1`] = `<div />`;

exports[`<Participant /> #render() still matches snapshot 1`] = `
<Fragment>
  <WithStyles(TableCell)
    className=""
  >
    <ConnectFunction
      accessLevel="full"
      classes={Object {}}
      followers={Array []}
      heading={false}
      hideRenderRowTail={false}
      id={null}
      index={0}
      noName={false}
      personId={null}
      personType={null}
      readOnly={false}
      readOnlyStatus={false}
      resaga={
        Object {
          "dispatchTo": [MockFunction],
          "setValue": [MockFunction],
        }
      }
      showAvatar={true}
      showSubDetail={true}
      textComponent={[Function]}
      value="value"
      variant="textOnly"
    />
  </WithStyles(TableCell)>
  <WithStyles(TableCell)
    className=""
  >
    <ConnectFunction
      accessLevel="full"
      boldFromNode={false}
      classes={Object {}}
      followers={Array []}
      heading={false}
      hideRenderRowTail={false}
      id={null}
      index={0}
      noName={false}
      personId={null}
      personType={null}
      readOnly={false}
      readOnlyStatus={false}
      resaga={
        Object {
          "dispatchTo": [MockFunction],
          "setValue": [MockFunction],
        }
      }
      showAvatar={true}
      showSubDetail={true}
      textComponent={[Function]}
      value="value"
      variant="default"
    />
  </WithStyles(TableCell)>
  <WithStyles(TableCell)
    className=""
  >
    <ConnectFunction
      accessLevel="full"
      classes={Object {}}
      followers={Array []}
      heading={false}
      hideRenderRowTail={false}
      id={null}
      index={0}
      noName={false}
      personId={null}
      personType={null}
      readOnly={false}
      readOnlyStatus={false}
      resaga={
        Object {
          "dispatchTo": [MockFunction],
          "setValue": [MockFunction],
        }
      }
      showAvatar={true}
      showSubDetail={true}
      textComponent={[Function]}
      value="value"
      variant="textOnly"
    />
  </WithStyles(TableCell)>
</Fragment>
`;

exports[`<Participant /> #renderCreatedAt() still matches snapshot 1`] = `
<div>
  <WithStyles(GridItem)>
    <H6
      dense={true}
    >
      <FormattedMessage
        defaultMessage="Received {date}"
        id="app.smartComponents.Node.types.participant.subheadingPrefix"
        values={
          Object {
            "date": "renderPart",
          }
        }
      />
    </H6>
  </WithStyles(GridItem)>
</div>
`;

exports[`<Participant /> #renderRowAvatar() still matches snapshot 1`] = `
<div>
  <ConnectFunction
    PersonAvatarProps={
      Object {
        "personEmail": undefined,
        "showAvatarDetails": true,
      }
    }
    accessLevel=""
    classes={Object {}}
    followers={Array []}
    heading={false}
    hideRenderRowTail={false}
    id={null}
    index={0}
    noName={false}
    personId={null}
    personType={null}
    readOnly={true}
    readOnlyStatus={false}
    resaga={
      Object {
        "dispatchTo": [MockFunction],
        "setValue": [MockFunction],
      }
    }
    showAvatar={true}
    showSubDetail={true}
    textComponent={[Function]}
    tooltipText={[Function]}
    value="value"
    variant="avatar"
  />
</div>
`;

exports[`<Participant /> #renderRowAvatarWithClassName() still matches snapshot 1`] = `
<div>
  <ConnectFunction
    PersonAvatarProps={
      Object {
        "personEmail": undefined,
        "showAvatarDetails": true,
      }
    }
    accessLevel="full"
    className={Object {}}
    classes={Object {}}
    followers={Array []}
    heading={false}
    hideRenderRowTail={false}
    id={null}
    index={0}
    noName={false}
    onRenderRowTail={[Function]}
    personId={null}
    personType={null}
    readOnly={false}
    readOnlyStatus={false}
    resaga={
      Object {
        "dispatchTo": [MockFunction],
        "setValue": [MockFunction],
      }
    }
    showAvatar={true}
    showSubDetail={true}
    textComponent={[Function]}
    tooltipText={[Function]}
    value="value"
    variant="avatar"
  />
</div>
`;

exports[`<Participant /> #renderRowSubtitle() still matches snapshot 1`] = `
<div>
  <H6
    dense={true}
  >
    value
  </H6>
</div>
`;

exports[`<Participant /> #renderRowSubtitle() still matches snapshot if props.heading 1`] = `
<div>
  <H6
    dense={true}
  >
    value
  </H6>
</div>
`;

exports[`<Participant /> #renderRowTitle() still matches snapshot 1`] = `
<div>
  <P
    color="primary"
    dense={true}
    title="This participant is not yet connected to someone registered on uGroop."
    weight="bold"
  >
    value
  </P>
</div>
`;

exports[`<Participant /> #renderRowTitle() still matches snapshot if props.heading 1`] = `
<div>
  <H4
    color="primary"
    dense={true}
    weight="bold"
  >
    value
  </H4>
</div>
`;

exports[`<Participant /> #renderTextOnly() still matches snapshot 1`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
  >
    <WithStyles(GridItem)>
      <ConnectFunction
        accessLevel="full"
        classes={Object {}}
        followers={Array []}
        heading={false}
        hideRenderRowTail={false}
        id={null}
        index={0}
        noName={false}
        personId={null}
        personType={null}
        readOnly={false}
        readOnlyStatus={false}
        renderValue={[Function]}
        resaga={
          Object {
            "dispatchTo": [MockFunction],
            "setValue": [MockFunction],
          }
        }
        showAvatar={true}
        showSubDetail={true}
        textComponent={[Function]}
        value="value"
        variant="textOnly"
      />
    </WithStyles(GridItem)>
    <ConnectFunction
      accessLevel="full"
      classes={Object {}}
      followers={Array []}
      heading={false}
      hideRenderRowTail={false}
      id={null}
      index={0}
      noName={false}
      personId={null}
      personType={null}
      readOnly={false}
      readOnlyStatus={false}
      resaga={
        Object {
          "dispatchTo": [MockFunction],
          "setValue": [MockFunction],
        }
      }
      showAvatar={true}
      showSubDetail={true}
      textComponent={[Function]}
      value="value"
      variant="textOnly"
    />
    <ConnectFunction
      accessLevel="full"
      classes={Object {}}
      followers={Array []}
      heading={false}
      hideRenderRowTail={false}
      id={null}
      index={0}
      noName={false}
      personId={null}
      personType={null}
      readOnly={false}
      readOnlyStatus={false}
      resaga={
        Object {
          "dispatchTo": [MockFunction],
          "setValue": [MockFunction],
        }
      }
      showAvatar={true}
      showSubDetail={true}
      textComponent={[Function]}
      value="value"
      variant="textOnly"
    />
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Participant /> #renderTextOnly() still matches snapshot when read only 1`] = `
<div>
  <ConnectFunction
    accessLevel="full"
    classes={Object {}}
    followers={Array []}
    heading={false}
    hideRenderRowTail={false}
    id={null}
    index={0}
    noName={false}
    personId={null}
    personType={null}
    readOnly={false}
    readOnlyStatus={false}
    renderValue={[Function]}
    resaga={
      Object {
        "dispatchTo": [MockFunction],
        "setValue": [MockFunction],
      }
    }
    showAvatar={true}
    showSubDetail={true}
    textComponent={[Function]}
    value="value"
    variant="readOnly"
  />
</div>
`;

exports[`<Participant /> #renderTextOnlyNameValue() still matches snapshot 1`] = `
<div>
  <H5
    dense={true}
    weight="bold"
  />
</div>
`;

exports[`<Participant /> canExecuteParticipant should match snapshot 1`] = `
<div>
  <Component />
</div>
`;

exports[`<Participant /> closePopper() should closePopper 1`] = `<div />`;

exports[`<Participant /> closePopper() should closePopper 2`] = `<div />`;

exports[`<Participant /> handleConfirmMove should be called 1`] = `<div />`;

exports[`<Participant /> openSeeDetail() should openSeeDetail 1`] = `<div />`;

exports[`<Participant /> renderMoveButton() should renderMoveButton 1`] = `<div />`;

exports[`<Participant /> renderPersonNameEditables() should renderPersonNameEditables 1`] = `<div />`;

exports[`<Participant /> renderPersonPart should match snapshot 1`] = `
<div>
  <Span
    accessLevel="full"
    classes={Object {}}
    dataStore="personDataStore"
    followers={Array []}
    heading={false}
    hideRenderRowTail={false}
    id={null}
    index={0}
    noName={false}
    personId={null}
    personType={null}
    readOnly={false}
    readOnlyStatus={false}
    resaga={
      Object {
        "dispatchTo": [MockFunction],
        "setValue": [MockFunction],
      }
    }
    showAvatar={true}
    showSubDetail={true}
    textComponent={[Function]}
    value="value"
    variant="text"
  />
</div>
`;

exports[`<Participant /> renderPersonPart should match snapshot 2`] = `
<div>
  <Span
    accessLevel="full"
    classes={Object {}}
    dataStore="personDataStore"
    followers={Array []}
    heading={false}
    hideRenderRowTail={false}
    id={null}
    index={0}
    noName={false}
    personId={null}
    personType={null}
    readOnly={false}
    readOnlyStatus={false}
    resaga={
      Object {
        "dispatchTo": [MockFunction],
        "setValue": [MockFunction],
      }
    }
    showAvatar={true}
    showSubDetail={true}
    textComponent={[Function]}
    value="value"
    variant="text"
  />
</div>
`;

exports[`<Participant /> renderPopperPaper() should renderPopperPaper 1`] = `<div />`;

exports[`<Participant /> renderPopperPaperContent() should renderPopperPaperContent 1`] = `<div />`;

exports[`<Participant /> renderPopperPaperContent() should renderPopperPaperContent 2`] = `<div />`;

exports[`<Participant /> renderPopperPaperContent() should renderPopperPaperContent if no linkedUserId 1`] = `<div />`;

exports[`<Participant /> renderPopperPaperContent() should renderPopperPaperContent if no linkedUserId 2`] = `<div />`;

exports[`<Participant /> renderPopperPaperContent() should return something else if loading 1`] = `<div />`;

exports[`<Participant /> renderPopperPaperContent() should return something else if loading 2`] = `<div />`;

exports[`<Participant /> renderRow() should renderRow 1`] = `<div />`;

exports[`<Participant /> renderRow() should renderRow 2`] = `<div />`;

exports[`<Participant /> renderRowConditions should match snapshot 1`] = `
<div>
  <ConnectFunction
    accessLevel="full"
    classes={Object {}}
    followers={Array []}
    heading={false}
    hideRenderRowTail={false}
    id={null}
    index={0}
    noName={false}
    personId={null}
    personType={null}
    readOnly={false}
    readOnlyStatus={false}
    resaga={
      Object {
        "dispatchTo": [MockFunction],
        "setValue": [MockFunction],
      }
    }
    showAvatar={true}
    showSubDetail={true}
    textComponent={[Function]}
    value="value"
    variant="icon"
  />
  <ConnectFunction
    accessLevel="full"
    classes={Object {}}
    followers={Array []}
    heading={false}
    hideRenderRowTail={false}
    id={null}
    index={0}
    noName={false}
    personId={null}
    personType={null}
    readOnly={false}
    readOnlyStatus={false}
    resaga={
      Object {
        "dispatchTo": [MockFunction],
        "setValue": [MockFunction],
      }
    }
    showAvatar={true}
    showSubDetail={true}
    textComponent={[Function]}
    value="value"
    variant="icon"
  />
  <WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Passport)))))))
    accessLevel="full"
    classes={Object {}}
    followers={Array []}
    heading={false}
    hideRenderRowTail={false}
    id={null}
    index={0}
    noName={false}
    personId={null}
    personType={null}
    readOnly={false}
    readOnlyStatus={false}
    resaga={
      Object {
        "dispatchTo": [MockFunction],
        "setValue": [MockFunction],
      }
    }
    showAvatar={true}
    showSubDetail={true}
    textComponent={[Function]}
    value="value"
    variant="icon"
  />
</div>
`;

exports[`<Participant /> renderRowContent() should renderRowContent 1`] = `<div />`;

exports[`<Participant /> renderRowSimple should match snapshot 1`] = `
<div>
  <WithStyles(GridItem)
    clickable={true}
    onClick={[Function]}
  >
    <WithStyles(ListRow)>
      <WithStyles(GridContainer)
        alignItems="center"
        spacing={1}
      >
        <WithStyles(GridItem)>
          <WithStyles(Connect(WithSimplifyResaga(ConditionsBorderStyle)))
            id={null}
          >
            <Component />
          </WithStyles(Connect(WithSimplifyResaga(ConditionsBorderStyle)))>
        </WithStyles(GridItem)>
      </WithStyles(GridContainer)>
    </WithStyles(ListRow)>
  </WithStyles(GridItem)>
</div>
`;

exports[`<Participant /> renderRowSimple should match snapshot if showAvatar is false 1`] = `
<div>
  <WithStyles(GridItem)
    clickable={true}
    onClick={[Function]}
  >
    <WithStyles(ListRow)>
      <WithStyles(GridContainer)
        alignItems="center"
        spacing={1}
      >
        <WithStyles(GridItem) />
      </WithStyles(GridContainer)>
    </WithStyles(ListRow)>
  </WithStyles(GridItem)>
</div>
`;

exports[`<Participant /> renderRowSimpleContent should match snapshot 1`] = `
<div>
  <WithStyles(GridItem)
    xs={true}
  >
    <WithStyles(Editable)
      readOnly={false}
    >
      <WithStyles(GridContainer)
        alignItems="center"
        wrap="nowrap"
      >
        <WithStyles(GridItem)
          xs={true}
        >
          <WithStyles(GridContainer)
            direction="column"
            spacing={0}
          >
            <WithStyles(GridItem)>
              <WithStyles(GridContainer)
                alignItems="baseline"
                wrap="nowrap"
              >
                <WithStyles(GridItem)>
                  <ConnectFunction
                    accessLevel="full"
                    boldFromNode={false}
                    classes={Object {}}
                    followers={Array []}
                    heading={false}
                    hideRenderRowTail={false}
                    id={null}
                    index={0}
                    noName={false}
                    personId={null}
                    personType={null}
                    readOnly={false}
                    readOnlyStatus={false}
                    renderValue={[Function]}
                    resaga={
                      Object {
                        "dispatchTo": [MockFunction],
                        "setValue": [MockFunction],
                      }
                    }
                    showAvatar={true}
                    showSubDetail={true}
                    textComponent={[Function]}
                    value="value"
                    variant="default"
                  />
                </WithStyles(GridItem)>
              </WithStyles(GridContainer)>
            </WithStyles(GridItem)>
          </WithStyles(GridContainer)>
        </WithStyles(GridItem)>
      </WithStyles(GridContainer)>
    </WithStyles(Editable)>
  </WithStyles(GridItem)>
</div>
`;

exports[`<Participant /> renderRowSimpleContent should match snapshot 2`] = `
<div>
  <WithStyles(GridItem)
    xs={true}
  >
    <WithStyles(Editable)
      readOnly={false}
    >
      <WithStyles(GridContainer)
        alignItems="center"
        wrap="nowrap"
      >
        <WithStyles(GridItem)
          xs={true}
        >
          <WithStyles(GridContainer)
            direction="column"
            spacing={0}
          >
            <WithStyles(GridItem)>
              <WithStyles(GridContainer)
                alignItems="baseline"
                wrap="nowrap"
              >
                <WithStyles(GridItem)>
                  <ConnectFunction
                    accessLevel="full"
                    boldFromNode={false}
                    classes={Object {}}
                    followers={Array []}
                    heading={false}
                    hideRenderRowTail={false}
                    id={null}
                    index={0}
                    noName={false}
                    personId={null}
                    personType={null}
                    readOnly={false}
                    readOnlyStatus={false}
                    renderValue={[Function]}
                    resaga={
                      Object {
                        "dispatchTo": [MockFunction],
                        "setValue": [MockFunction],
                      }
                    }
                    showAvatar={true}
                    showSubDetail={true}
                    textComponent={[Function]}
                    value="value"
                    variant="default"
                  />
                </WithStyles(GridItem)>
                <ConnectFunction
                  accessLevel="full"
                  classes={Object {}}
                  followers={Array []}
                  heading={false}
                  hideRenderRowTail={false}
                  id={null}
                  index={0}
                  noName={false}
                  personId={null}
                  personType={null}
                  readOnly={false}
                  readOnlyStatus={false}
                  resaga={
                    Object {
                      "dispatchTo": [MockFunction],
                      "setValue": [MockFunction],
                    }
                  }
                  showAvatar={true}
                  showSubDetail={true}
                  textComponent={[Function]}
                  value="value"
                  variant="icon"
                />
                <ConnectFunction
                  accessLevel="full"
                  classes={Object {}}
                  followers={Array []}
                  heading={false}
                  hideRenderRowTail={false}
                  id={null}
                  index={0}
                  noName={false}
                  personId={null}
                  personType={null}
                  readOnly={false}
                  readOnlyStatus={false}
                  resaga={
                    Object {
                      "dispatchTo": [MockFunction],
                      "setValue": [MockFunction],
                    }
                  }
                  showAvatar={true}
                  showSubDetail={true}
                  textComponent={[Function]}
                  value="value"
                  variant="icon"
                />
                <WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Passport)))))))
                  accessLevel="full"
                  classes={Object {}}
                  followers={Array []}
                  heading={false}
                  hideRenderRowTail={false}
                  id={null}
                  index={0}
                  noName={false}
                  personId={null}
                  personType={null}
                  readOnly={false}
                  readOnlyStatus={false}
                  resaga={
                    Object {
                      "dispatchTo": [MockFunction],
                      "setValue": [MockFunction],
                    }
                  }
                  showAvatar={true}
                  showSubDetail={true}
                  textComponent={[Function]}
                  value="value"
                  variant="icon"
                />
              </WithStyles(GridContainer)>
            </WithStyles(GridItem)>
          </WithStyles(GridContainer)>
        </WithStyles(GridItem)>
      </WithStyles(GridContainer)>
    </WithStyles(Editable)>
  </WithStyles(GridItem)>
</div>
`;

exports[`<Participant /> renderRowSimpleContent should match snapshot if showAvatar is false 1`] = `
<div>
  <WithStyles(GridItem)
    xs={true}
  >
    <WithStyles(Editable)
      onClick={[MockFunction]}
      readOnly={false}
    >
      <WithStyles(GridContainer)
        alignItems="center"
        wrap="nowrap"
      >
        <WithStyles(GridItem)
          xs={true}
        >
          <WithStyles(GridContainer)
            direction="column"
            spacing={0}
          >
            <WithStyles(GridItem)>
              <WithStyles(GridContainer)
                alignItems="baseline"
                wrap="nowrap"
              >
                <WithStyles(GridItem)>
                  <ConnectFunction
                    accessLevel="full"
                    boldFromNode={false}
                    classes={Object {}}
                    followers={Array []}
                    handleEditableClick={[MockFunction]}
                    heading={false}
                    hideRenderRowTail={false}
                    id={null}
                    index={0}
                    noName={false}
                    personId={null}
                    personType={null}
                    readOnly={false}
                    readOnlyStatus={false}
                    renderValue={[Function]}
                    resaga={
                      Object {
                        "dispatchTo": [MockFunction],
                        "setValue": [MockFunction],
                      }
                    }
                    showAvatar={true}
                    showSubDetail={true}
                    textComponent={[Function]}
                    value="value"
                    variant="default"
                  />
                </WithStyles(GridItem)>
                <ConnectFunction
                  accessLevel="full"
                  classes={Object {}}
                  followers={Array []}
                  handleEditableClick={[MockFunction]}
                  heading={false}
                  hideRenderRowTail={false}
                  id={null}
                  index={0}
                  noName={false}
                  personId={null}
                  personType={null}
                  readOnly={false}
                  readOnlyStatus={false}
                  resaga={
                    Object {
                      "dispatchTo": [MockFunction],
                      "setValue": [MockFunction],
                    }
                  }
                  showAvatar={true}
                  showSubDetail={true}
                  textComponent={[Function]}
                  value="value"
                  variant="icon"
                />
                <ConnectFunction
                  accessLevel="full"
                  classes={Object {}}
                  followers={Array []}
                  handleEditableClick={[MockFunction]}
                  heading={false}
                  hideRenderRowTail={false}
                  id={null}
                  index={0}
                  noName={false}
                  personId={null}
                  personType={null}
                  readOnly={false}
                  readOnlyStatus={false}
                  resaga={
                    Object {
                      "dispatchTo": [MockFunction],
                      "setValue": [MockFunction],
                    }
                  }
                  showAvatar={true}
                  showSubDetail={true}
                  textComponent={[Function]}
                  value="value"
                  variant="icon"
                />
                <WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Passport)))))))
                  accessLevel="full"
                  classes={Object {}}
                  followers={Array []}
                  handleEditableClick={[MockFunction]}
                  heading={false}
                  hideRenderRowTail={false}
                  id={null}
                  index={0}
                  noName={false}
                  personId={null}
                  personType={null}
                  readOnly={false}
                  readOnlyStatus={false}
                  resaga={
                    Object {
                      "dispatchTo": [MockFunction],
                      "setValue": [MockFunction],
                    }
                  }
                  showAvatar={true}
                  showSubDetail={true}
                  textComponent={[Function]}
                  value="value"
                  variant="icon"
                />
              </WithStyles(GridContainer)>
            </WithStyles(GridItem)>
          </WithStyles(GridContainer)>
        </WithStyles(GridItem)>
      </WithStyles(GridContainer)>
    </WithStyles(Editable)>
  </WithStyles(GridItem)>
</div>
`;

exports[`<Participant /> renderTableRow should match snapshot 1`] = `
<div>
  <WithStyles(TableCell)
    className=""
  >
    <ConnectFunction
      accessLevel="full"
      classes={Object {}}
      followers={Array []}
      heading={false}
      hideRenderRowTail={false}
      id={null}
      index={0}
      noName={false}
      personId={null}
      personType={null}
      readOnly={false}
      readOnlyStatus={false}
      resaga={
        Object {
          "dispatchTo": [MockFunction],
          "setValue": [MockFunction],
        }
      }
      showAvatar={true}
      showSubDetail={true}
      textComponent={[Function]}
      value="value"
      variant="textOnly"
    />
  </WithStyles(TableCell)>
  <WithStyles(TableCell)
    className=""
  >
    <ConnectFunction
      accessLevel="full"
      boldFromNode={false}
      classes={Object {}}
      followers={Array []}
      heading={false}
      hideRenderRowTail={false}
      id={null}
      index={0}
      noName={false}
      personId={null}
      personType={null}
      readOnly={false}
      readOnlyStatus={false}
      resaga={
        Object {
          "dispatchTo": [MockFunction],
          "setValue": [MockFunction],
        }
      }
      showAvatar={true}
      showSubDetail={true}
      textComponent={[Function]}
      value="value"
      variant="default"
    />
  </WithStyles(TableCell)>
  <WithStyles(TableCell)
    className=""
  >
    <ConnectFunction
      accessLevel="full"
      classes={Object {}}
      followers={Array []}
      heading={false}
      hideRenderRowTail={false}
      id={null}
      index={0}
      noName={false}
      personId={null}
      personType={null}
      readOnly={false}
      readOnlyStatus={false}
      resaga={
        Object {
          "dispatchTo": [MockFunction],
          "setValue": [MockFunction],
        }
      }
      showAvatar={true}
      showSubDetail={true}
      textComponent={[Function]}
      value="value"
      variant="textOnly"
    />
  </WithStyles(TableCell)>
</div>
`;

exports[`<Participant /> renderTableRow should match snapshot 2`] = `
<div>
  <WithStyles(TableCell)
    className=""
  >
    <WithStyles(GridContainer)
      direction="column"
      spacing={0}
    >
      <WithStyles(GridItem)>
        <ConnectFunction
          accessLevel="full"
          classes={Object {}}
          followers={Array []}
          heading={false}
          hideRenderRowTail={false}
          id={null}
          index={0}
          noName={false}
          personId={null}
          personType={null}
          readOnly={false}
          readOnlyStatus={false}
          resaga={
            Object {
              "dispatchTo": [MockFunction],
              "setValue": [MockFunction],
            }
          }
          showAvatar={true}
          showSubDetail={true}
          smDown={true}
          textComponent={[Function]}
          value="value"
          variant="textOnly"
        />
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <ConnectFunction
          accessLevel="full"
          boldFromNode={false}
          classes={Object {}}
          followers={Array []}
          heading={false}
          hideRenderRowTail={false}
          id={null}
          index={0}
          noName={false}
          personId={null}
          personType={null}
          readOnly={false}
          readOnlyStatus={false}
          resaga={
            Object {
              "dispatchTo": [MockFunction],
              "setValue": [MockFunction],
            }
          }
          showAvatar={true}
          showSubDetail={true}
          smDown={true}
          textComponent={[Function]}
          value="value"
          variant="default"
        />
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <ConnectFunction
          accessLevel="full"
          classes={Object {}}
          followers={Array []}
          heading={false}
          hideRenderRowTail={false}
          id={null}
          index={0}
          noName={false}
          personId={null}
          personType={null}
          readOnly={false}
          readOnlyStatus={false}
          resaga={
            Object {
              "dispatchTo": [MockFunction],
              "setValue": [MockFunction],
            }
          }
          showAvatar={true}
          showSubDetail={true}
          smDown={true}
          textComponent={[Function]}
          value="value"
          variant="textOnly"
        />
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </WithStyles(TableCell)>
</div>
`;
