// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Tab /> batchDelete() should call dispatchTo 1`] = `
Array [
  Array [
    "TemplateTabs",
    "getTemplateTabDetail",
    Object {
      "payload": Object {
        "tab": Object {
          "id": 898,
          "type": "tabgallery",
        },
        "templateId": 999,
      },
    },
  ],
  Array [
    "Nodes",
    "batchDeleteChildren",
    Object {
      "onError": [Function],
      "onSuccess": [Function],
      "payload": Object {
        "items": Array [
          1,
        ],
        "keyPath": "898.children",
      },
    },
  ],
]
`;

exports[`<Tab /> confirmDelete() should call PORTAL_HELPERS.confirmDeletePhoto 1`] = `
Array [
  Array [
    Object {
      "count": 1,
      "onConfirm": Object {},
    },
    Object {
      "children": Array [],
      "classes": Object {},
      "id": 898,
      "isPublic": false,
      "resaga": Object {
        "dispatchTo": [MockFunction] {
          "calls": Array [
            Array [
              "TemplateTabs",
              "getTemplateTabDetail",
              Object {
                "payload": Object {
                  "tab": Object {
                    "id": 898,
                    "type": "tabgallery",
                  },
                  "templateId": 999,
                },
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setValue": [MockFunction],
      },
      "templateId": 999,
    },
  ],
]
`;

exports[`<Tab /> fetchTab() should fetchTab() 1`] = `
Array [
  Array [
    "TemplateTabs",
    "getTemplateTabDetail",
    Object {
      "payload": Object {
        "tab": Object {
          "id": 898,
          "type": "tabgallery",
        },
        "templateId": 999,
      },
    },
  ],
  Array [
    "TemplateTabs",
    "getTemplateTabDetail",
    Object {
      "payload": Object {
        "tab": Object {
          "id": 898,
          "type": "tabgallery",
        },
        "templateId": 999,
      },
    },
  ],
]
`;

exports[`<Tab /> fetchTab() should not be called dispatchTo on public 1`] = `<div />`;

exports[`<Tab /> render() should render correctly 1`] = `
<div>
  <WithStyles(GridContainer)
    className=""
    direction="column"
    spacing={2}
  >
    <WithStyles(GridItem)>
      <WithStyles(GridContainer)
        direction="column"
      >
        <WithStyles(GridItem)>
          <Hidden
            smUp={true}
          >
            <WithStyles(GridContainer)
              alignItems="center"
              direction="row"
              justify="flex-start"
              spacing={0}
              wrap="nowrap"
            >
              <WithStyles(GridItem)>
                <WithStyles(GridContainer)
                  alignItems="center"
                  justify="flex-start"
                  spacing={0}
                  wrap="nowrap"
                >
                  <WithStyles(GridItem)>
                    <WithStyles(JTextClass)
                      bold={true}
                      dark={true}
                      md={true}
                    >
                      <WithStyles(Connect(WithSimplifyResaga(NodeProp)))
                        id={898}
                        isCustomData={false}
                        required={true}
                        showEmpty={true}
                        valueKey="content"
                      />
                    </WithStyles(JTextClass)>
                  </WithStyles(GridItem)>
                </WithStyles(GridContainer)>
              </WithStyles(GridItem)>
              <WithStyles(GridItem)>
                <WithStyles(GridContainer)
                  alignItems="center"
                  direction="row"
                  spacing={0}
                  wrap="nowrap"
                >
                  <Hidden
                    xsDown={true}
                  >
                    <WithStyles(GridItem)>
                      <ConnectFunction
                        renderButton={[Function]}
                        value="GRID_VIEW"
                      >
                        <Component />
                      </ConnectFunction>
                    </WithStyles(GridItem)>
                  </Hidden>
                  <WithStyles(GridItem)>
                    <ConnectFunction
                      renderButton={[Function]}
                      value="RECENTLY_UPLOADED"
                    >
                      <Component />
                    </ConnectFunction>
                  </WithStyles(GridItem)>
                  <WithStyles(GridItem)>
                    <ConnectFunction
                      menuHeader="Group by"
                      noPadding={true}
                      renderButton={[Function]}
                      value="none"
                    >
                      <Component />
                    </ConnectFunction>
                  </WithStyles(GridItem)>
                </WithStyles(GridContainer)>
              </WithStyles(GridItem)>
              <WithStyles(GridItem)>
                <WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(UploadPhotos)))))))
                  full={true}
                />
              </WithStyles(GridItem)>
            </WithStyles(GridContainer)>
          </Hidden>
          <Hidden
            xsDown={true}
          >
            <WithStyles(GridContainer)
              alignItems="center"
              direction="row"
              justify="space-between"
              spacing={0}
            >
              <WithStyles(GridItem)>
                <WithStyles(GridContainer)
                  alignItems="center"
                  direction="row"
                  justify="flex-start"
                  spacing={0}
                  wrap="nowrap"
                >
                  <WithStyles(GridItem)>
                    <WithStyles(GridContainer)
                      alignItems="center"
                      justify="flex-start"
                      spacing={0}
                      wrap="nowrap"
                    >
                      <WithStyles(GridItem)>
                        <WithStyles(JTextClass)
                          bold={true}
                          dark={true}
                          md={true}
                        >
                          <WithStyles(Connect(WithSimplifyResaga(NodeProp)))
                            id={898}
                            isCustomData={false}
                            required={true}
                            showEmpty={true}
                            valueKey="content"
                          />
                        </WithStyles(JTextClass)>
                      </WithStyles(GridItem)>
                    </WithStyles(GridContainer)>
                  </WithStyles(GridItem)>
                  <Hidden
                    xsDown={true}
                  >
                    <WithStyles(GridItem)>
                      <ConnectFunction
                        renderButton={[Function]}
                        value="GRID_VIEW"
                      >
                        <Component />
                      </ConnectFunction>
                    </WithStyles(GridItem)>
                  </Hidden>
                  <WithStyles(GridItem)>
                    <ConnectFunction
                      renderButton={[Function]}
                      value="RECENTLY_UPLOADED"
                    >
                      <Component />
                    </ConnectFunction>
                  </WithStyles(GridItem)>
                  <WithStyles(GridItem)>
                    <ConnectFunction
                      menuHeader="Group by"
                      noPadding={true}
                      renderButton={[Function]}
                      value="none"
                    >
                      <Component />
                    </ConnectFunction>
                  </WithStyles(GridItem)>
                </WithStyles(GridContainer)>
              </WithStyles(GridItem)>
              <WithStyles(GridItem)>
                <WithStyles(GridContainer)
                  alignItems="center"
                  noWrap={true}
                >
                  <WithStyles(GridItem)>
                    <WithStyles(GridContainer)
                      alignItems="center"
                      noWrap={true}
                      spacing={0}
                      wrap="nowrap"
                    >
                      <WithStyles(GridItem)>
                        <WithStyles(GridContainer)
                          alignItems="center"
                          noWrap={true}
                          spacing={1}
                          wrap="nowrap"
                        >
                          <WithStyles(GridItem)>
                            <SelectField
                              InputProps={
                                Object {
                                  "classes": Object {
                                    "input": undefined,
                                  },
                                  "disableUnderline": true,
                                }
                              }
                              SelectProps={
                                Object {
                                  "displayEmpty": true,
                                }
                              }
                              component={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "Naked": [Function],
                                  "displayName": "WithStyles(TextField)",
                                  "options": Object {
                                    "defaultTheme": Object {
                                      "breakpoints": Object {
                                        "between": [Function],
                                        "down": [Function],
                                        "keys": Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ],
                                        "only": [Function],
                                        "up": [Function],
                                        "values": Object {
                                          "lg": 1280,
                                          "md": 960,
                                          "sm": 600,
                                          "xl": 1920,
                                          "xs": 0,
                                        },
                                        "width": [Function],
                                      },
                                      "direction": "ltr",
                                      "mixins": Object {
                                        "gutters": [Function],
                                        "toolbar": Object {
                                          "@media (min-width:0px) and (orientation: landscape)": Object {
                                            "minHeight": 48,
                                          },
                                          "@media (min-width:600px)": Object {
                                            "minHeight": 64,
                                          },
                                          "minHeight": 56,
                                        },
                                      },
                                      "overrides": Object {},
                                      "palette": Object {
                                        "action": Object {
                                          "activatedOpacity": 0.12,
                                          "active": "rgba(0, 0, 0, 0.54)",
                                          "disabled": "rgba(0, 0, 0, 0.26)",
                                          "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                          "disabledOpacity": 0.38,
                                          "focus": "rgba(0, 0, 0, 0.12)",
                                          "focusOpacity": 0.12,
                                          "hover": "rgba(0, 0, 0, 0.04)",
                                          "hoverOpacity": 0.04,
                                          "selected": "rgba(0, 0, 0, 0.08)",
                                          "selectedOpacity": 0.08,
                                        },
                                        "augmentColor": [Function],
                                        "background": Object {
                                          "default": "#fafafa",
                                          "paper": "#fff",
                                        },
                                        "common": Object {
                                          "black": "#000",
                                          "white": "#fff",
                                        },
                                        "contrastThreshold": 3,
                                        "divider": "rgba(0, 0, 0, 0.12)",
                                        "error": Object {
                                          "contrastText": "#fff",
                                          "dark": "#d32f2f",
                                          "light": "#e57373",
                                          "main": "#f44336",
                                        },
                                        "getContrastText": [Function],
                                        "grey": Object {
                                          "100": "#f5f5f5",
                                          "200": "#eeeeee",
                                          "300": "#e0e0e0",
                                          "400": "#bdbdbd",
                                          "50": "#fafafa",
                                          "500": "#9e9e9e",
                                          "600": "#757575",
                                          "700": "#616161",
                                          "800": "#424242",
                                          "900": "#212121",
                                          "A100": "#d5d5d5",
                                          "A200": "#aaaaaa",
                                          "A400": "#303030",
                                          "A700": "#616161",
                                        },
                                        "info": Object {
                                          "contrastText": "#fff",
                                          "dark": "#1976d2",
                                          "light": "#64b5f6",
                                          "main": "#2196f3",
                                        },
                                        "primary": Object {
                                          "contrastText": "#fff",
                                          "dark": "#303f9f",
                                          "light": "#7986cb",
                                          "main": "#3f51b5",
                                        },
                                        "secondary": Object {
                                          "contrastText": "#fff",
                                          "dark": "#c51162",
                                          "light": "#ff4081",
                                          "main": "#f50057",
                                        },
                                        "success": Object {
                                          "contrastText": "rgba(0, 0, 0, 0.87)",
                                          "dark": "#388e3c",
                                          "light": "#81c784",
                                          "main": "#4caf50",
                                        },
                                        "text": Object {
                                          "disabled": "rgba(0, 0, 0, 0.38)",
                                          "hint": "rgba(0, 0, 0, 0.38)",
                                          "primary": "rgba(0, 0, 0, 0.87)",
                                          "secondary": "rgba(0, 0, 0, 0.54)",
                                        },
                                        "tonalOffset": 0.2,
                                        "type": "light",
                                        "warning": Object {
                                          "contrastText": "rgba(0, 0, 0, 0.87)",
                                          "dark": "#f57c00",
                                          "light": "#ffb74d",
                                          "main": "#ff9800",
                                        },
                                      },
                                      "props": Object {},
                                      "shadows": Array [
                                        "none",
                                        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                      ],
                                      "shape": Object {
                                        "borderRadius": 4,
                                      },
                                      "spacing": [Function],
                                      "transitions": Object {
                                        "create": [Function],
                                        "duration": Object {
                                          "complex": 375,
                                          "enteringScreen": 225,
                                          "leavingScreen": 195,
                                          "short": 250,
                                          "shorter": 200,
                                          "shortest": 150,
                                          "standard": 300,
                                        },
                                        "easing": Object {
                                          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                        },
                                        "getAutoHeightDuration": [Function],
                                      },
                                      "typography": Object {
                                        "body1": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00938em",
                                          "lineHeight": 1.5,
                                        },
                                        "body2": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.01071em",
                                          "lineHeight": 1.43,
                                        },
                                        "button": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 500,
                                          "letterSpacing": "0.02857em",
                                          "lineHeight": 1.75,
                                          "textTransform": "uppercase",
                                        },
                                        "caption": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.75rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.03333em",
                                          "lineHeight": 1.66,
                                        },
                                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                        "fontSize": 14,
                                        "fontWeightBold": 700,
                                        "fontWeightLight": 300,
                                        "fontWeightMedium": 500,
                                        "fontWeightRegular": 400,
                                        "h1": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "6rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "-0.01562em",
                                          "lineHeight": 1.167,
                                        },
                                        "h2": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "3.75rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "-0.00833em",
                                          "lineHeight": 1.2,
                                        },
                                        "h3": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "3rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0em",
                                          "lineHeight": 1.167,
                                        },
                                        "h4": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "2.125rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00735em",
                                          "lineHeight": 1.235,
                                        },
                                        "h5": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.5rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0em",
                                          "lineHeight": 1.334,
                                        },
                                        "h6": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.25rem",
                                          "fontWeight": 500,
                                          "letterSpacing": "0.0075em",
                                          "lineHeight": 1.6,
                                        },
                                        "htmlFontSize": 16,
                                        "overline": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.75rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.08333em",
                                          "lineHeight": 2.66,
                                          "textTransform": "uppercase",
                                        },
                                        "pxToRem": [Function],
                                        "round": [Function],
                                        "subtitle1": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00938em",
                                          "lineHeight": 1.75,
                                        },
                                        "subtitle2": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 500,
                                          "letterSpacing": "0.00714em",
                                          "lineHeight": 1.57,
                                        },
                                      },
                                      "zIndex": Object {
                                        "appBar": 1100,
                                        "drawer": 1200,
                                        "mobileStepper": 1000,
                                        "modal": 1300,
                                        "snackbar": 1400,
                                        "speedDial": 1050,
                                        "tooltip": 1500,
                                      },
                                    },
                                    "name": "viewComponents/TextField",
                                  },
                                  "propTypes": Object {
                                    "classes": [Function],
                                    "innerRef": [Function],
                                  },
                                  "render": [Function],
                                  "useStyles": [Function],
                                }
                              }
                              onChange={[Function]}
                              options={
                                Array [
                                  Object {
                                    "children": "12",
                                    "value": 12,
                                  },
                                  Object {
                                    "children": "24",
                                    "value": 24,
                                  },
                                  Object {
                                    "children": "48",
                                    "value": 48,
                                  },
                                ]
                              }
                              value={12}
                            />
                          </WithStyles(GridItem)>
                          <WithStyles(GridItem)>
                            per page
                          </WithStyles(GridItem)>
                        </WithStyles(GridContainer)>
                      </WithStyles(GridItem)>
                      <WithStyles(GridItem)>
                        1
                         
                        –
                         
                        1
                         of
                         
                        1
                      </WithStyles(GridItem)>
                    </WithStyles(GridContainer)>
                  </WithStyles(GridItem)>
                  <WithStyles(GridItem)>
                    <WithStyles(GridItem)>
                      <WithStyles(GridContainer)
                        justify="flex-end"
                        spacing={0}
                      >
                        <WithStyles(GridItem)>
                          <WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(UploadPhotos)))))))
                            full={true}
                          />
                        </WithStyles(GridItem)>
                      </WithStyles(GridContainer)>
                    </WithStyles(GridItem)>
                  </WithStyles(GridItem)>
                </WithStyles(GridContainer)>
              </WithStyles(GridItem)>
            </WithStyles(GridContainer)>
          </Hidden>
        </WithStyles(GridItem)>
        <Hidden
          smUp={true}
        >
          <WithStyles(GridItem)>
            <WithStyles(GridContainer)
              alignItems="center"
              noWrap={true}
              spacing={0}
              wrap="nowrap"
            >
              <WithStyles(GridItem)>
                <WithStyles(GridContainer)
                  alignItems="center"
                  noWrap={true}
                  spacing={1}
                  wrap="nowrap"
                >
                  <WithStyles(GridItem)>
                    <SelectField
                      InputProps={
                        Object {
                          "classes": Object {
                            "input": undefined,
                          },
                          "disableUnderline": true,
                        }
                      }
                      SelectProps={
                        Object {
                          "displayEmpty": true,
                        }
                      }
                      component={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Naked": [Function],
                          "displayName": "WithStyles(TextField)",
                          "options": Object {
                            "defaultTheme": Object {
                              "breakpoints": Object {
                                "between": [Function],
                                "down": [Function],
                                "keys": Array [
                                  "xs",
                                  "sm",
                                  "md",
                                  "lg",
                                  "xl",
                                ],
                                "only": [Function],
                                "up": [Function],
                                "values": Object {
                                  "lg": 1280,
                                  "md": 960,
                                  "sm": 600,
                                  "xl": 1920,
                                  "xs": 0,
                                },
                                "width": [Function],
                              },
                              "direction": "ltr",
                              "mixins": Object {
                                "gutters": [Function],
                                "toolbar": Object {
                                  "@media (min-width:0px) and (orientation: landscape)": Object {
                                    "minHeight": 48,
                                  },
                                  "@media (min-width:600px)": Object {
                                    "minHeight": 64,
                                  },
                                  "minHeight": 56,
                                },
                              },
                              "overrides": Object {},
                              "palette": Object {
                                "action": Object {
                                  "activatedOpacity": 0.12,
                                  "active": "rgba(0, 0, 0, 0.54)",
                                  "disabled": "rgba(0, 0, 0, 0.26)",
                                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                  "disabledOpacity": 0.38,
                                  "focus": "rgba(0, 0, 0, 0.12)",
                                  "focusOpacity": 0.12,
                                  "hover": "rgba(0, 0, 0, 0.04)",
                                  "hoverOpacity": 0.04,
                                  "selected": "rgba(0, 0, 0, 0.08)",
                                  "selectedOpacity": 0.08,
                                },
                                "augmentColor": [Function],
                                "background": Object {
                                  "default": "#fafafa",
                                  "paper": "#fff",
                                },
                                "common": Object {
                                  "black": "#000",
                                  "white": "#fff",
                                },
                                "contrastThreshold": 3,
                                "divider": "rgba(0, 0, 0, 0.12)",
                                "error": Object {
                                  "contrastText": "#fff",
                                  "dark": "#d32f2f",
                                  "light": "#e57373",
                                  "main": "#f44336",
                                },
                                "getContrastText": [Function],
                                "grey": Object {
                                  "100": "#f5f5f5",
                                  "200": "#eeeeee",
                                  "300": "#e0e0e0",
                                  "400": "#bdbdbd",
                                  "50": "#fafafa",
                                  "500": "#9e9e9e",
                                  "600": "#757575",
                                  "700": "#616161",
                                  "800": "#424242",
                                  "900": "#212121",
                                  "A100": "#d5d5d5",
                                  "A200": "#aaaaaa",
                                  "A400": "#303030",
                                  "A700": "#616161",
                                },
                                "info": Object {
                                  "contrastText": "#fff",
                                  "dark": "#1976d2",
                                  "light": "#64b5f6",
                                  "main": "#2196f3",
                                },
                                "primary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#303f9f",
                                  "light": "#7986cb",
                                  "main": "#3f51b5",
                                },
                                "secondary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#c51162",
                                  "light": "#ff4081",
                                  "main": "#f50057",
                                },
                                "success": Object {
                                  "contrastText": "rgba(0, 0, 0, 0.87)",
                                  "dark": "#388e3c",
                                  "light": "#81c784",
                                  "main": "#4caf50",
                                },
                                "text": Object {
                                  "disabled": "rgba(0, 0, 0, 0.38)",
                                  "hint": "rgba(0, 0, 0, 0.38)",
                                  "primary": "rgba(0, 0, 0, 0.87)",
                                  "secondary": "rgba(0, 0, 0, 0.54)",
                                },
                                "tonalOffset": 0.2,
                                "type": "light",
                                "warning": Object {
                                  "contrastText": "rgba(0, 0, 0, 0.87)",
                                  "dark": "#f57c00",
                                  "light": "#ffb74d",
                                  "main": "#ff9800",
                                },
                              },
                              "props": Object {},
                              "shadows": Array [
                                "none",
                                "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                              ],
                              "shape": Object {
                                "borderRadius": 4,
                              },
                              "spacing": [Function],
                              "transitions": Object {
                                "create": [Function],
                                "duration": Object {
                                  "complex": 375,
                                  "enteringScreen": 225,
                                  "leavingScreen": 195,
                                  "short": 250,
                                  "shorter": 200,
                                  "shortest": 150,
                                  "standard": 300,
                                },
                                "easing": Object {
                                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                },
                                "getAutoHeightDuration": [Function],
                              },
                              "typography": Object {
                                "body1": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "1rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0.00938em",
                                  "lineHeight": 1.5,
                                },
                                "body2": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.875rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0.01071em",
                                  "lineHeight": 1.43,
                                },
                                "button": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.875rem",
                                  "fontWeight": 500,
                                  "letterSpacing": "0.02857em",
                                  "lineHeight": 1.75,
                                  "textTransform": "uppercase",
                                },
                                "caption": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.75rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0.03333em",
                                  "lineHeight": 1.66,
                                },
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": 14,
                                "fontWeightBold": 700,
                                "fontWeightLight": 300,
                                "fontWeightMedium": 500,
                                "fontWeightRegular": 400,
                                "h1": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "6rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "-0.01562em",
                                  "lineHeight": 1.167,
                                },
                                "h2": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "3.75rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "-0.00833em",
                                  "lineHeight": 1.2,
                                },
                                "h3": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "3rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0em",
                                  "lineHeight": 1.167,
                                },
                                "h4": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "2.125rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0.00735em",
                                  "lineHeight": 1.235,
                                },
                                "h5": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "1.5rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0em",
                                  "lineHeight": 1.334,
                                },
                                "h6": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "1.25rem",
                                  "fontWeight": 500,
                                  "letterSpacing": "0.0075em",
                                  "lineHeight": 1.6,
                                },
                                "htmlFontSize": 16,
                                "overline": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.75rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0.08333em",
                                  "lineHeight": 2.66,
                                  "textTransform": "uppercase",
                                },
                                "pxToRem": [Function],
                                "round": [Function],
                                "subtitle1": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "1rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0.00938em",
                                  "lineHeight": 1.75,
                                },
                                "subtitle2": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.875rem",
                                  "fontWeight": 500,
                                  "letterSpacing": "0.00714em",
                                  "lineHeight": 1.57,
                                },
                              },
                              "zIndex": Object {
                                "appBar": 1100,
                                "drawer": 1200,
                                "mobileStepper": 1000,
                                "modal": 1300,
                                "snackbar": 1400,
                                "speedDial": 1050,
                                "tooltip": 1500,
                              },
                            },
                            "name": "viewComponents/TextField",
                          },
                          "propTypes": Object {
                            "classes": [Function],
                            "innerRef": [Function],
                          },
                          "render": [Function],
                          "useStyles": [Function],
                        }
                      }
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "children": "12",
                            "value": 12,
                          },
                          Object {
                            "children": "24",
                            "value": 24,
                          },
                          Object {
                            "children": "48",
                            "value": 48,
                          },
                        ]
                      }
                      value={12}
                    />
                  </WithStyles(GridItem)>
                  <WithStyles(GridItem)>
                    per page
                  </WithStyles(GridItem)>
                </WithStyles(GridContainer)>
              </WithStyles(GridItem)>
              <WithStyles(GridItem)>
                1
                 
                –
                 
                1
                 of
                 
                1
              </WithStyles(GridItem)>
            </WithStyles(GridContainer)>
          </WithStyles(GridItem)>
        </Hidden>
        renderSelect
      </WithStyles(GridContainer)>
    </WithStyles(GridItem)>
    <WithStyles(GridItem)>
      <WithStyles(GridContainer)
        direction="column"
        spacing={0}
      >
        <WithStyles(GridItem)>
          renderContent
        </WithStyles(GridItem)>
      </WithStyles(GridContainer)>
    </WithStyles(GridItem)>
    <WithStyles(GridItem)>
      <WithStyles(GridContainer)
        alignItems="center"
        noWrap={true}
        spacing={0}
        wrap="nowrap"
      >
        <WithStyles(GridItem)>
          <WithStyles(GridContainer)
            alignItems="center"
            noWrap={true}
            spacing={1}
            wrap="nowrap"
          >
            <WithStyles(GridItem)>
              <SelectField
                InputProps={
                  Object {
                    "classes": Object {
                      "input": undefined,
                    },
                    "disableUnderline": true,
                  }
                }
                SelectProps={
                  Object {
                    "displayEmpty": true,
                  }
                }
                component={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Naked": [Function],
                    "displayName": "WithStyles(TextField)",
                    "options": Object {
                      "defaultTheme": Object {
                        "breakpoints": Object {
                          "between": [Function],
                          "down": [Function],
                          "keys": Array [
                            "xs",
                            "sm",
                            "md",
                            "lg",
                            "xl",
                          ],
                          "only": [Function],
                          "up": [Function],
                          "values": Object {
                            "lg": 1280,
                            "md": 960,
                            "sm": 600,
                            "xl": 1920,
                            "xs": 0,
                          },
                          "width": [Function],
                        },
                        "direction": "ltr",
                        "mixins": Object {
                          "gutters": [Function],
                          "toolbar": Object {
                            "@media (min-width:0px) and (orientation: landscape)": Object {
                              "minHeight": 48,
                            },
                            "@media (min-width:600px)": Object {
                              "minHeight": 64,
                            },
                            "minHeight": 56,
                          },
                        },
                        "overrides": Object {},
                        "palette": Object {
                          "action": Object {
                            "activatedOpacity": 0.12,
                            "active": "rgba(0, 0, 0, 0.54)",
                            "disabled": "rgba(0, 0, 0, 0.26)",
                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                            "disabledOpacity": 0.38,
                            "focus": "rgba(0, 0, 0, 0.12)",
                            "focusOpacity": 0.12,
                            "hover": "rgba(0, 0, 0, 0.04)",
                            "hoverOpacity": 0.04,
                            "selected": "rgba(0, 0, 0, 0.08)",
                            "selectedOpacity": 0.08,
                          },
                          "augmentColor": [Function],
                          "background": Object {
                            "default": "#fafafa",
                            "paper": "#fff",
                          },
                          "common": Object {
                            "black": "#000",
                            "white": "#fff",
                          },
                          "contrastThreshold": 3,
                          "divider": "rgba(0, 0, 0, 0.12)",
                          "error": Object {
                            "contrastText": "#fff",
                            "dark": "#d32f2f",
                            "light": "#e57373",
                            "main": "#f44336",
                          },
                          "getContrastText": [Function],
                          "grey": Object {
                            "100": "#f5f5f5",
                            "200": "#eeeeee",
                            "300": "#e0e0e0",
                            "400": "#bdbdbd",
                            "50": "#fafafa",
                            "500": "#9e9e9e",
                            "600": "#757575",
                            "700": "#616161",
                            "800": "#424242",
                            "900": "#212121",
                            "A100": "#d5d5d5",
                            "A200": "#aaaaaa",
                            "A400": "#303030",
                            "A700": "#616161",
                          },
                          "info": Object {
                            "contrastText": "#fff",
                            "dark": "#1976d2",
                            "light": "#64b5f6",
                            "main": "#2196f3",
                          },
                          "primary": Object {
                            "contrastText": "#fff",
                            "dark": "#303f9f",
                            "light": "#7986cb",
                            "main": "#3f51b5",
                          },
                          "secondary": Object {
                            "contrastText": "#fff",
                            "dark": "#c51162",
                            "light": "#ff4081",
                            "main": "#f50057",
                          },
                          "success": Object {
                            "contrastText": "rgba(0, 0, 0, 0.87)",
                            "dark": "#388e3c",
                            "light": "#81c784",
                            "main": "#4caf50",
                          },
                          "text": Object {
                            "disabled": "rgba(0, 0, 0, 0.38)",
                            "hint": "rgba(0, 0, 0, 0.38)",
                            "primary": "rgba(0, 0, 0, 0.87)",
                            "secondary": "rgba(0, 0, 0, 0.54)",
                          },
                          "tonalOffset": 0.2,
                          "type": "light",
                          "warning": Object {
                            "contrastText": "rgba(0, 0, 0, 0.87)",
                            "dark": "#f57c00",
                            "light": "#ffb74d",
                            "main": "#ff9800",
                          },
                        },
                        "props": Object {},
                        "shadows": Array [
                          "none",
                          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                        ],
                        "shape": Object {
                          "borderRadius": 4,
                        },
                        "spacing": [Function],
                        "transitions": Object {
                          "create": [Function],
                          "duration": Object {
                            "complex": 375,
                            "enteringScreen": 225,
                            "leavingScreen": 195,
                            "short": 250,
                            "shorter": 200,
                            "shortest": 150,
                            "standard": 300,
                          },
                          "easing": Object {
                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                          },
                          "getAutoHeightDuration": [Function],
                        },
                        "typography": Object {
                          "body1": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "1rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.00938em",
                            "lineHeight": 1.5,
                          },
                          "body2": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.875rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.01071em",
                            "lineHeight": 1.43,
                          },
                          "button": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.875rem",
                            "fontWeight": 500,
                            "letterSpacing": "0.02857em",
                            "lineHeight": 1.75,
                            "textTransform": "uppercase",
                          },
                          "caption": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.75rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.03333em",
                            "lineHeight": 1.66,
                          },
                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                          "fontSize": 14,
                          "fontWeightBold": 700,
                          "fontWeightLight": 300,
                          "fontWeightMedium": 500,
                          "fontWeightRegular": 400,
                          "h1": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "6rem",
                            "fontWeight": 300,
                            "letterSpacing": "-0.01562em",
                            "lineHeight": 1.167,
                          },
                          "h2": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "3.75rem",
                            "fontWeight": 300,
                            "letterSpacing": "-0.00833em",
                            "lineHeight": 1.2,
                          },
                          "h3": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "3rem",
                            "fontWeight": 400,
                            "letterSpacing": "0em",
                            "lineHeight": 1.167,
                          },
                          "h4": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "2.125rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.00735em",
                            "lineHeight": 1.235,
                          },
                          "h5": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "1.5rem",
                            "fontWeight": 400,
                            "letterSpacing": "0em",
                            "lineHeight": 1.334,
                          },
                          "h6": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "1.25rem",
                            "fontWeight": 500,
                            "letterSpacing": "0.0075em",
                            "lineHeight": 1.6,
                          },
                          "htmlFontSize": 16,
                          "overline": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.75rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.08333em",
                            "lineHeight": 2.66,
                            "textTransform": "uppercase",
                          },
                          "pxToRem": [Function],
                          "round": [Function],
                          "subtitle1": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "1rem",
                            "fontWeight": 400,
                            "letterSpacing": "0.00938em",
                            "lineHeight": 1.75,
                          },
                          "subtitle2": Object {
                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                            "fontSize": "0.875rem",
                            "fontWeight": 500,
                            "letterSpacing": "0.00714em",
                            "lineHeight": 1.57,
                          },
                        },
                        "zIndex": Object {
                          "appBar": 1100,
                          "drawer": 1200,
                          "mobileStepper": 1000,
                          "modal": 1300,
                          "snackbar": 1400,
                          "speedDial": 1050,
                          "tooltip": 1500,
                        },
                      },
                      "name": "viewComponents/TextField",
                    },
                    "propTypes": Object {
                      "classes": [Function],
                      "innerRef": [Function],
                    },
                    "render": [Function],
                    "useStyles": [Function],
                  }
                }
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "children": "12",
                      "value": 12,
                    },
                    Object {
                      "children": "24",
                      "value": 24,
                    },
                    Object {
                      "children": "48",
                      "value": 48,
                    },
                  ]
                }
                value={12}
              />
            </WithStyles(GridItem)>
            <WithStyles(GridItem)>
              per page
            </WithStyles(GridItem)>
          </WithStyles(GridContainer)>
        </WithStyles(GridItem)>
        <WithStyles(GridItem)>
          1
           
          –
           
          1
           of
           
          1
        </WithStyles(GridItem)>
      </WithStyles(GridContainer)>
    </WithStyles(GridItem)>
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderContent() should renderContent 1`] = `
<div>
  <ConnectFunction
    groupBy="createdAt"
    ids={Array []}
    value="RECENTLY_UPLOADED.GRID_VIEW"
  >
    <Component />
  </ConnectFunction>
</div>
`;

exports[`<Tab /> renderDescription() should renderDescription 1`] = `
<div>
  <WithStyles(GridItem)>
    content
  </WithStyles(GridItem)>
</div>
`;

exports[`<Tab /> renderEmpty() should renderEmpty 1`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
  >
    <WithStyles(GridItem)>
      <WithStyles(GridContainer)
        alignItems="center"
        direction="row"
      >
        <WithStyles(GridContainer)
          alignItems="center"
          justify="flex-start"
          spacing={0}
          wrap="nowrap"
        >
          <WithStyles(GridItem)>
            <WithStyles(JTextClass)
              bold={true}
              dark={true}
              md={true}
            >
              <WithStyles(Connect(WithSimplifyResaga(NodeProp)))
                id={898}
                isCustomData={false}
                required={true}
                showEmpty={true}
                valueKey="content"
              />
            </WithStyles(JTextClass)>
          </WithStyles(GridItem)>
        </WithStyles(GridContainer)>
      </WithStyles(GridContainer)>
    </WithStyles(GridItem)>
    <WithStyles(GridItem)>
      <WithStyles(Connect(WithSimplifyResaga(GalleryInitial)))
        id={898}
      />
    </WithStyles(GridItem)>
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderGroup() should renderGroup 1`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
    key="1"
  >
    <WithStyles(GridItem)>
      renderGroupHeader
    </WithStyles(GridItem)>
    <WithStyles(GridItem)>
      renderPhotos
    </WithStyles(GridItem)>
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderGroupButton() should renderGroupButton 1`] = `
<div>
  <WithStyles(Button)
    color="inline"
    size="xs"
  >
    <WithStyles(GridContainer)
      alignItems="center"
      direction="row"
      justify="flex-start"
      spacing={0}
      wrap="nowrap"
    >
      <Hidden
        smDown={true}
      >
        <WithStyles(GridItem)>
          Group by: 
        </WithStyles(GridItem)>
      </Hidden>
      <WithStyles(GridItem)>
        Date
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <WithStyles(Icon)
          icon="lnr-chevron-down"
          paddingLeft={true}
          size="xsmall"
        />
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </WithStyles(Button)>
</div>
`;

exports[`<Tab /> renderGroupButton() should renderGroupButton NONE 1`] = `
<div>
  <WithStyles(Button)
    color="inline"
    size="xs"
  >
    <WithStyles(GridContainer)
      alignItems="center"
      direction="row"
      justify="flex-start"
      spacing={0}
      wrap="nowrap"
    >
      <WithStyles(GridItem)>
        Group by
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <WithStyles(Icon)
          icon="lnr-chevron-down"
          paddingLeft={true}
          size="xsmall"
        />
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </WithStyles(Button)>
</div>
`;

exports[`<Tab /> renderGroupHeader() should renderGroupHeader CREATED_AT 1`] = `
<div>
  <div
    className=""
  >
    <WithStyles(GridContainer)
      alignItems="center"
    >
      <WithStyles(GridItem)>
        Today
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        (
        )
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </div>
</div>
`;

exports[`<Tab /> renderGroupHeader() should renderGroupHeader CREATED_BY 1`] = `
<div>
  <div
    className=""
  >
    <WithStyles(GridContainer)
      alignItems="center"
    >
      <WithStyles(GridItem)>
        <ConnectFunction
          shape="imageRound"
          size="imageExtraExtraSmall"
          variant="readOnly"
        />
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <Component
          variant="stringOnly"
        />
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        (
        )
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </div>
</div>
`;

exports[`<Tab /> renderGroupMenu() should renderGroupMenu 1`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
  >
    <WithStyles(GridItem)>
      <WithStyles(MenuItem)
        onClick={[Function]}
        selected={false}
      >
        Author
      </WithStyles(MenuItem)>
      <WithStyles(MenuItem)
        onClick={[Function]}
        selected={true}
      >
        Uploaded Date
      </WithStyles(MenuItem)>
      <WithStyles(MenuItem)
        onClick={[Function]}
      >
        Ungrouped
      </WithStyles(MenuItem)>
    </WithStyles(GridItem)>
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderGroupMenu() should renderGroupMenu 2`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
  >
    <WithStyles(GridItem)>
      <WithStyles(MenuItem)
        onClick={[Function]}
        selected={false}
      >
        Author
      </WithStyles(MenuItem)>
      <WithStyles(MenuItem)
        onClick={[Function]}
        selected={false}
      >
        Uploaded Date
      </WithStyles(MenuItem)>
    </WithStyles(GridItem)>
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderGroups() should renderGroups 1`] = `
<div>
  renderGroup
</div>
`;

exports[`<Tab /> renderHeader() should renderHeader 1`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
  >
    <WithStyles(GridItem)>
      renderMenus
    </WithStyles(GridItem)>
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderHeader() should renderHeader if xsDown is true 1`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
  >
    <WithStyles(GridItem)>
      renderMenus
    </WithStyles(GridItem)>
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderLayoutButton() should renderLayoutButton 1`] = `
<div>
  <WithStyles(Button)
    color="inline"
    size="xs"
  >
    <WithStyles(GridContainer)
      alignItems="center"
      spacing={0}
    >
      <Hidden
        smDown={true}
      >
        <WithStyles(GridItem)>
          Layout: 
        </WithStyles(GridItem)>
      </Hidden>
      <WithStyles(GridItem)>
        <WithStyles(Icon)
          icon="lnr-icons2"
          paddingLeft={true}
          size="normal"
        />
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <WithStyles(Icon)
          icon="lnr-chevron-down"
          paddingLeft={true}
          size="xsmall"
        />
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </WithStyles(Button)>
</div>
`;

exports[`<Tab /> renderLayoutMenu() should renderLayoutMenu 1`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
    spacing={0}
  >
    <WithStyles(GridItem)>
      <WithStyles(MenuItem)
        icon="lnr-icons2"
        onClick={[Function]}
        selected={true}
      >
        Grid view
      </WithStyles(MenuItem)>
      <WithStyles(MenuItem)
        icon="lnr-menu2"
        onClick={[Function]}
        selected={false}
      >
        List view
      </WithStyles(MenuItem)>
    </WithStyles(GridItem)>
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderMenus should render if xsDown 1`] = `
<div>
  <Hidden
    smUp={true}
  >
    <WithStyles(GridContainer)
      alignItems="center"
      direction="row"
      justify="flex-start"
      spacing={0}
      wrap="nowrap"
    >
      <WithStyles(GridItem)>
        <WithStyles(GridContainer)
          alignItems="center"
          justify="flex-start"
          spacing={0}
          wrap="nowrap"
        >
          <WithStyles(GridItem)>
            <WithStyles(JTextClass)
              bold={true}
              dark={true}
              md={true}
            >
              <WithStyles(Connect(WithSimplifyResaga(NodeProp)))
                id={898}
                isCustomData={false}
                required={true}
                showEmpty={true}
                valueKey="content"
              />
            </WithStyles(JTextClass)>
          </WithStyles(GridItem)>
        </WithStyles(GridContainer)>
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <WithStyles(GridContainer)
          alignItems="center"
          direction="row"
          spacing={0}
          wrap="nowrap"
        >
          <Hidden
            xsDown={true}
          >
            <WithStyles(GridItem)>
              <ConnectFunction
                renderButton={[Function]}
                value="GRID_VIEW"
              >
                <Component />
              </ConnectFunction>
            </WithStyles(GridItem)>
          </Hidden>
          <WithStyles(GridItem)>
            <ConnectFunction
              renderButton={[Function]}
              value="RECENTLY_UPLOADED"
            >
              <Component />
            </ConnectFunction>
          </WithStyles(GridItem)>
          <WithStyles(GridItem)>
            <ConnectFunction
              menuHeader="Group by"
              noPadding={true}
              renderButton={[Function]}
              value="none"
            >
              <Component />
            </ConnectFunction>
          </WithStyles(GridItem)>
        </WithStyles(GridContainer)>
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(UploadPhotos)))))))
          full={true}
        />
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </Hidden>
  <Hidden
    xsDown={true}
  >
    <WithStyles(GridContainer)
      alignItems="center"
      direction="row"
      justify="space-between"
      spacing={0}
    >
      <WithStyles(GridItem)>
        <WithStyles(GridContainer)
          alignItems="center"
          direction="row"
          justify="flex-start"
          spacing={0}
          wrap="nowrap"
        >
          <WithStyles(GridItem)>
            <WithStyles(GridContainer)
              alignItems="center"
              justify="flex-start"
              spacing={0}
              wrap="nowrap"
            >
              <WithStyles(GridItem)>
                <WithStyles(JTextClass)
                  bold={true}
                  dark={true}
                  md={true}
                >
                  <WithStyles(Connect(WithSimplifyResaga(NodeProp)))
                    id={898}
                    isCustomData={false}
                    required={true}
                    showEmpty={true}
                    valueKey="content"
                  />
                </WithStyles(JTextClass)>
              </WithStyles(GridItem)>
            </WithStyles(GridContainer)>
          </WithStyles(GridItem)>
          <Hidden
            xsDown={true}
          >
            <WithStyles(GridItem)>
              <ConnectFunction
                renderButton={[Function]}
                value="GRID_VIEW"
              >
                <Component />
              </ConnectFunction>
            </WithStyles(GridItem)>
          </Hidden>
          <WithStyles(GridItem)>
            <ConnectFunction
              renderButton={[Function]}
              value="RECENTLY_UPLOADED"
            >
              <Component />
            </ConnectFunction>
          </WithStyles(GridItem)>
          <WithStyles(GridItem)>
            <ConnectFunction
              menuHeader="Group by"
              noPadding={true}
              renderButton={[Function]}
              value="none"
            >
              <Component />
            </ConnectFunction>
          </WithStyles(GridItem)>
        </WithStyles(GridContainer)>
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <WithStyles(GridContainer)
          alignItems="center"
          noWrap={true}
        >
          <WithStyles(GridItem)>
            <WithStyles(GridContainer)
              direction="column"
            >
              <WithStyles(GridItem)>
                <WithStyles(GridContainer)
                  alignItems="center"
                  direction="row"
                >
                  <WithStyles(GridContainer)
                    alignItems="center"
                    justify="flex-start"
                    spacing={0}
                    wrap="nowrap"
                  >
                    <WithStyles(GridItem)>
                      <WithStyles(JTextClass)
                        bold={true}
                        dark={true}
                        md={true}
                      >
                        <WithStyles(Connect(WithSimplifyResaga(NodeProp)))
                          id={898}
                          isCustomData={false}
                          required={true}
                          showEmpty={true}
                          valueKey="content"
                        />
                      </WithStyles(JTextClass)>
                    </WithStyles(GridItem)>
                  </WithStyles(GridContainer)>
                </WithStyles(GridContainer)>
              </WithStyles(GridItem)>
              <WithStyles(GridItem)>
                <WithStyles(Connect(WithSimplifyResaga(GalleryInitial)))
                  id={898}
                />
              </WithStyles(GridItem)>
            </WithStyles(GridContainer)>
          </WithStyles(GridItem)>
          <WithStyles(GridItem)>
            <WithStyles(GridItem)>
              <WithStyles(GridContainer)
                justify="flex-end"
                spacing={0}
              >
                <WithStyles(GridItem)>
                  <WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(UploadPhotos)))))))
                    full={true}
                  />
                </WithStyles(GridItem)>
              </WithStyles(GridContainer)>
            </WithStyles(GridItem)>
          </WithStyles(GridItem)>
        </WithStyles(GridContainer)>
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </Hidden>
</div>
`;

exports[`<Tab /> renderPageItem() should renderPageItem 1`] = `
<div>
  <WithStyles(ForwardRef(PaginationItem))
    classes={
      Object {
        "root": undefined,
        "selected": undefined,
      }
    }
  />
</div>
`;

exports[`<Tab /> renderPhoto() should renderPhoto 1`] = `
<div>
  <WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Activity)))))
    clickMode="Preview"
    groupBy="none"
    isPublic={false}
    layout="GRID_VIEW"
    onClick={[Function]}
    onDelete={[Function]}
    selected={false}
    variant="PHOTO_CARD"
  >
    <Component />
  </WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Activity)))))>
</div>
`;

exports[`<Tab /> renderPhotoComponent() should add to showingIds 1`] = `
<WithStyles(GridItem)
  lg={3}
  md={4}
  sm={6}
  xs={12}
>
  content
</WithStyles(GridItem)>
`;

exports[`<Tab /> renderPhotoDetail() should renderPhotoDetail 1`] = `
<div>
  <WithStyles(Connect(WithSimplifyResaga(Connect(WithSimplifyResaga(Description)))))
    advancedMode={false}
  />
</div>
`;

exports[`<Tab /> renderPhotos() should render photos with sorter when sortBy is most liked 1`] = `ShallowWrapper {}`;

exports[`<Tab /> renderPhotos() should renderPhotos 1`] = `
<div>
  <WithStyles(GridContainer)
    key="0_12"
  >
    renderPhoto
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderPhotos() should renderPhotos CARD_VIEW 1`] = `
<div>
  <WithStyles(GridContainer)
    key="0_12"
  >
    renderPhoto
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderPhotos() should renderPhotos LIST_VIEW 1`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
    key="0_12"
    spacing={4}
  >
    renderPhoto
  </WithStyles(GridContainer)>
</div>
`;

exports[`<Tab /> renderSelect() should renderSelect 1`] = `
<div>
  <WithStyles(GridItem)>
    <WithStyles(GridContainer)
      alignItems="center"
      className=""
      justify="space-between"
    >
      <WithStyles(GridItem)>
        <WithStyles(GridContainer)
          alignItems="center"
        >
          <WithStyles(GridItem)>
            <WithStyles(Button)
              color="normal"
              onClick={[Function]}
              size="xs"
            >
              Cancel
            </WithStyles(Button)>
          </WithStyles(GridItem)>
          <WithStyles(GridItem)>
            <WithStyles(Button)
              color="normal"
              onClick={[Function]}
              size="xs"
            >
              Select All
            </WithStyles(Button)>
          </WithStyles(GridItem)>
        </WithStyles(GridContainer)>
      </WithStyles(GridItem)>
      <Hidden
        smDown={true}
      >
        <WithStyles(GridItem)>
          Click to Select
        </WithStyles(GridItem)>
      </Hidden>
      <WithStyles(GridItem)>
        <WithStyles(GridContainer)
          alignItems="center"
          justify="flex-end"
        >
          <WithStyles(GridItem)>
            <WithStyles(Button)
              color="alert"
              disabled={true}
              onClick={[Function]}
              size="xs"
            >
              <WithStyles(GridContainer)
                alignItems="center"
              >
                <WithStyles(GridItem)>
                  Delete
                </WithStyles(GridItem)>
                <WithStyles(GridItem)>
                  <WithStyles(Badge)
                    color="translucent"
                  >
                    <strong>
                      0
                    </strong>
                  </WithStyles(Badge)>
                </WithStyles(GridItem)>
              </WithStyles(GridContainer)>
            </WithStyles(Button)>
          </WithStyles(GridItem)>
        </WithStyles(GridContainer)>
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </WithStyles(GridItem)>
</div>
`;

exports[`<Tab /> renderSelect() should renderSelect clickMode SELECT 1`] = `<div />`;

exports[`<Tab /> renderSelect() should renderSelect deselectAll 1`] = `<div />`;

exports[`<Tab /> renderSelectDeselect() should render Deselect All 1`] = `
<div>
  <WithStyles(GridItem)>
    <WithStyles(Button)
      color="normal"
      onClick={[Function]}
      size="xs"
    >
      Select All
    </WithStyles(Button)>
  </WithStyles(GridItem)>
</div>
`;

exports[`<Tab /> renderSelectDeselect() should render Select All 1`] = `
<div>
  <WithStyles(GridItem)>
    <WithStyles(Button)
      color="normal"
      onClick={[Function]}
      size="xs"
    >
      Deselect All
    </WithStyles(Button)>
  </WithStyles(GridItem)>
</div>
`;

exports[`<Tab /> renderSortButton() should renderSortButton 1`] = `
<div>
  <WithStyles(Button)
    color="inline"
    size="xs"
  >
    <WithStyles(GridContainer)
      alignItems="center"
      direction="row"
      justify="flex-start"
      spacing={0}
      wrap="nowrap"
    >
      <Hidden
        smDown={true}
      >
        <WithStyles(GridItem)>
          Sort by: 
        </WithStyles(GridItem)>
      </Hidden>
      <WithStyles(GridItem)>
        Newest
      </WithStyles(GridItem)>
      <WithStyles(GridItem)>
        <WithStyles(Icon)
          icon="lnr-chevron-down"
          paddingLeft={true}
          size="xsmall"
        />
      </WithStyles(GridItem)>
    </WithStyles(GridContainer)>
  </WithStyles(Button)>
</div>
`;

exports[`<Tab /> renderSortLikes should return renderPhoto array 1`] = `
Array [
  <div>
    Render Photo
  </div>,
  <div>
    Render Photo
  </div>,
]
`;

exports[`<Tab /> renderSortMenu() should renderSortMenu 1`] = `
<div>
  <WithStyles(GridContainer)
    direction="column"
  >
    <WithStyles(GridItem)>
      <WithStyles(MenuItem)
        onClick={[Function]}
        selected={true}
      >
        See newest first
      </WithStyles(MenuItem)>
      <WithStyles(MenuItem)
        onClick={[Function]}
        selected={false}
      >
        See oldest first
      </WithStyles(MenuItem)>
      <WithStyles(MenuItem)
        onClick={[Function]}
        selected={false}
      >
        See most liked first
      </WithStyles(MenuItem)>
    </WithStyles(GridItem)>
  </WithStyles(GridContainer)>
</div>
`;
