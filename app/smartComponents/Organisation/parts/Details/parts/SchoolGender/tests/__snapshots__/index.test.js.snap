// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SchoolGender /> render() should render correctly 1`] = `
<div>
  <P
    intl={
      Object {
        "formatMessage": [MockFunction],
      }
    }
  />
</div>
`;

exports[`<SchoolGender /> render() should render text field if variant is text field 1`] = `
<Fragment>
  <ContextProvider
    value={
      Object {
        "isFormDisabled": [Function],
      }
    }
  >
    <Formsy
      disabled={false}
      getErrorMessage={[Function]}
      getErrorMessages={[Function]}
      getValue={[Function]}
      hasValue={[Function]}
      isFormDisabled={[Function]}
      isFormSubmitted={[Function]}
      isPristine={[Function]}
      isRequired={[Function]}
      isValid={[Function]}
      isValidValue={[Function]}
      mapping={null}
      onChange={[Function]}
      onError={[Function]}
      onInvalid={[Function]}
      onInvalidSubmit={[Function]}
      onReset={[Function]}
      onSubmit={[Function]}
      onValid={[Function]}
      onValidSubmit={[Function]}
      preventExternalInvalidation={false}
      resetValue={[Function]}
      setValidations={[Function]}
      setValue={[Function]}
      showError={[Function]}
      showRequired={[Function]}
      validationErrors={null}
    >
      <Wrapped
        canSubmitForm={true}
        cancelButtonContent="Discard"
        cancelForm={[Function]}
        isFormChanged={false}
        isFormDisabled={false}
        loading={false}
        renderCancelButton={[Function]}
        renderSubmitButton={[Function]}
        resetForm={[Function]}
        submitButtonContent="Submit"
        submitForm={[Function]}
      >
        <Formsy(WithStyles(SelectField))
          innerRef={[Function]}
          intl={
            Object {
              "formatMessage": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "defaultMessage": "School Gender",
                      "id": "app.smartComponents.Organisation.parts.SchoolGender.label",
                    },
                  ],
                  Array [
                    Object {
                      "defaultMessage": "School Gender",
                      "id": "app.smartComponents.Organisation.parts.SchoolGender.label",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              },
            }
          }
          name="type"
          options={
            Array [
              Object {
                "children": "Boys School",
                "value": "boys",
              },
              Object {
                "children": "Girls School",
                "value": "girls",
              },
              Object {
                "children": "Co-Educational",
                "value": "coEducational",
              },
            ]
          }
          required={false}
          validationError=""
          validationErrors={Object {}}
          validations={null}
          value=""
        />
      </Wrapped>
    </Formsy>
  </ContextProvider>
  <DiscardConfirmationDialog
    onCancel={[Function]}
    onConfirm={[Function]}
    open={false}
  />
</Fragment>
`;

exports[`<SchoolGender /> render() should render text only variant 1`] = `
<div>
  <P
    intl={
      Object {
        "formatMessage": [MockFunction],
      }
    }
  />
</div>
`;
